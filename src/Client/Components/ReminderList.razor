@using System.ComponentModel.DataAnnotations
@using System.Net
@using RemindMeApp.Shared

@inject ReminderClient Client

@if (_reminders is null)
{
    <div class="d-flex justify-content-center align-items-center vh-100">
        <div class="spinner-border" role="status"></div>
    </div>
}
else
{
    <h6 class="mb-3">Todo List</h6>

    <EditForm @ref="@_form" Model="@this" OnValidSubmit="@AddTodo" class="d-flex justify-content-center align-items-center mb-4">
        <DataAnnotationsValidator />
        <div class="form-outline flex-fill">
            <InputText autofocus class="form-control form-control-lg" @bind-Value="@NewReminder" placeholder="Type a new todo item" />
            <ValidationMessage For="@(() => NewReminder)" />
        </div>
    </EditForm>

    <ul class="list-group mb-0">
        @foreach (var todo in _reminders)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center border-start-0 border-top-0 border-end-0 border-bottom rounded-0 mb-2" @key="@todo.Id">
                <div class="d-flex align-items-center">
                    <input class="form-check-input me-2" type="checkbox" value="" aria-label="..." />
                    @todo.Title
                </div>
                <a data-mdb-toggle="tooltip" title="Remove item" style="text-decoration:none" @onclick="@(() => DeleteTodo(todo))">ðŸ—™</a>
            </li>
        }
    </ul>
}

@code {
    List<ReminderItem>? _reminders;
    EditForm? _form;

    [Required]
    public string? NewReminder { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadReminders();
    }

    async Task LoadReminders()
    {
        (_, _reminders) = await Client.GetRemindersAsync();
    }

    async Task AddTodo()
    {
        var createdReminder = await Client.AddReminderAsync(NewReminder);
        if (createdReminder is not null)
        {
            NewReminder = null;
            _form!.EditContext!.MarkAsUnmodified();
            _reminders!.Add(createdReminder);
        }
    }

    async Task DeleteTodo(ReminderItem reminder)
    {
        if (await Client.DeleteReminderAsync(reminder.Id))
        {
            _reminders!.Remove(reminder);
        }
    }
}
